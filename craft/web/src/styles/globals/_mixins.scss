@mixin transition($n){
  transition:all $n ease;
  -webkit-transition:all $n ease;
  -moz-transition:all $n ease;
}
@mixin background-image($size, $position, $img){
  background-image:url($img);
  background-repeat:no-repeat !important;
  background-size:$size !important;
  background-position:$position !important;
}

@mixin flex{
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex !important;
  -ms-flex-align: center;
  -webkit-align-items: center !important;
  -webkit-box-align: center !important;
  align-items: center !important;
}


/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
      #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
    }
  }

  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return calc(#{$m*100}vw #{$sign} #{$b});
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list,1);
    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }
  @return $sortedMap;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list,$i), 'space');
    }
  }
  @return $newList;
}


@mixin responsive-height($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    height: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      height: $max;
    }
  }

  @if $fallback {
    height: $fallback;
  }

  height: $responsive;
}


@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}


@mixin fadeOutOnPageTransition {
  transform: translateY(10px);
  opacity: 0;
  transition: all .3s $smooth-bezier;
  .is-exiting &{
    transform: translateY(-20px);
    opacity: 0;
  }
  .is-visible &{
    transform: translateY(0px);
    opacity: 1;
    transition: all .3s $smooth-bezier .1s;
  }
}


@mixin swoopOut{

  .is-exiting &{

  }
  .is-visible &{

  }
}

@keyframes swoopOut{
  to{
    transform: translateY(-20px);
  }
}


@mixin slideOutOnPageTransition {
  //transform: translateY(10px);
  //opacity: 0;
  transition: all .3s $smooth-bezier;
  .is-visible &{
    transform: translateY(0px);
    //opacity: 1;
    transition: all .3s $smooth-bezier .1s;
  }
  .is-exiting &{
    transform: translateY(-50px);
    //opacity: 0;
  }
}

@mixin slideInnerTextOnTransition{
  overflow: hidden;
  position: relative;

  span{
    display: block;
    position: relative;
  //  transition: transform .5s $fast-bezier;
    //transform: translateY(120%);

    //
    //.is-visible &{
    //  transform: translateY(0);
    //}
    //.is-exiting &{
    //  transform: translateY(-110%);
    //}
  }
}

@mixin header-overlay-desktop{
  //   /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#4b4586+3,4b4586+100&1+41,0+100 */
  // background: -moz-linear-gradient(left, rgba(75,69,134,1) 3%, rgba(75,69,134,1) 41%, rgba(75,69,134,0) 100%); /* FF3.6+ */
  // background: -webkit-gradient(linear, left top, right top, color-stop(3%,rgba(75,69,134,1)), color-stop(41%,rgba(75,69,134,1)), color-stop(100%,rgba(75,69,134,0))); /* Chrome,Safari4+ */
  // background: -webkit-linear-gradient(left, rgba(75,69,134,1) 3%,rgba(75,69,134,1) 41%,rgba(75,69,134,0) 100%); /* Chrome10+,Safari5.1+ */
  // background: -o-linear-gradient(left, rgba(75,69,134,1) 3%,rgba(75,69,134,1) 41%,rgba(75,69,134,0) 100%); /* Opera 11.10+ */
  // background: -ms-linear-gradient(left, rgba(75,69,134,1) 3%,rgba(75,69,134,1) 41%,rgba(75,69,134,0) 100%); /* IE10+ */
  // background: linear-gradient(to right, rgba(75,69,134,1) 3%,rgba(75,69,134,1) 41%,rgba(75,69,134,0) 100%); /* W3C */
  // filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4b4586', endColorstr='#004b4586',GradientType=1 ); /* IE6-9 */
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#1174c1+23,7db9e8+100&1+52,0+100 */
  background: -moz-linear-gradient(left, rgba(17,116,193,1) 23%, rgba(58,142,208,1) 52%, rgba(125,185,232,0) 100%); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, right top, color-stop(23%,rgba(17,116,193,1)), color-stop(52%,rgba(58,142,208,1)), color-stop(100%,rgba(125,185,232,0))); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* Opera 11.10+ */
  background: -ms-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* IE10+ */
  background: linear-gradient(to right, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#1174c1', endColorstr='#007db9e8',GradientType=1 ); /* IE6-9 */
}

@mixin header-overlay-tablet{
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#4b4586+22,4b4586+100&1+20,0+100 */
  // background: -moz-linear-gradient(left, rgba(75,69,134,1) 20%, rgba(75,69,134,0.98) 22%, rgba(75,69,134,0) 100%); /* FF3.6+ */
  // background: -webkit-gradient(linear, left top, right top, color-stop(20%,rgba(75,69,134,1)), color-stop(22%,rgba(75,69,134,0.98)), color-stop(100%,rgba(75,69,134,0))); /* Chrome,Safari4+ */
  // background: -webkit-linear-gradient(left, rgba(75,69,134,1) 20%,rgba(75,69,134,0.98) 22%,rgba(75,69,134,0) 100%); /* Chrome10+,Safari5.1+ */
  // background: -o-linear-gradient(left, rgba(75,69,134,1) 20%,rgba(75,69,134,0.98) 22%,rgba(75,69,134,0) 100%); /* Opera 11.10+ */
  // background: -ms-linear-gradient(left, rgba(75,69,134,1) 20%,rgba(75,69,134,0.98) 22%,rgba(75,69,134,0) 100%); /* IE10+ */
  // background: linear-gradient(to right, rgba(75,69,134,1) 20%,rgba(75,69,134,0.98) 22%,rgba(75,69,134,0) 100%); /* W3C */
  // filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4b4586', endColorstr='#004b4586',GradientType=1 ); /* IE6-9 */
  background: -moz-linear-gradient(left, rgba(17,116,193,1) 23%, rgba(58,142,208,1) 52%, rgba(125,185,232,0) 100%); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, right top, color-stop(23%,rgba(17,116,193,1)), color-stop(52%,rgba(58,142,208,1)), color-stop(100%,rgba(125,185,232,0))); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* Opera 11.10+ */
  background: -ms-linear-gradient(left, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* IE10+ */
  background: linear-gradient(to right, rgba(17,116,193,1) 23%,rgba(58,142,208,1) 52%,rgba(125,185,232,0) 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#1174c1', endColorstr='#007db9e8',GradientType=1 ); /* IE6-9 */
}
/* @include when-inside('.example'){ */
@mixin when-inside($selector) {
  #{$selector} & {
    @content;
  }
}
/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin in-between($min, $max) {
  $selector: &;
  $child: nth(nth($selector, -1), -1);

  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {
    @content;
  }
}

/*  @include family-of(3){  */
@mixin family-of($n) {
  &:first-child:nth-last-child(#{$n}) ~ &,
  &:first-child:nth-last-child(#{$n}) {
    @content;
  }
}


/* @include nth-of-family(3, 7) { */
@mixin nth-of-family($n, $m) {
  $m: $m + 1 - $n;
  &:nth-child(#{$n}):nth-last-child(#{$m}) {
    @content;
  }
}

// Check if z-index item appears in $list. If not, return an errors
@function z($list, $element) {
  $z-index: index($list, $element);

  @if $z-index {
    @return $z-index;
  }

  @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';
  @return null;
}

@mixin phone {
  @media (max-width: #{$phone-width}) {
    @content;
  }
}

@mixin phone-large {
  @media (min-width: #{$phone-width}) and (max-width: #{$phone-large-width - 1px}) {
    @content;
  }
}

@mixin phone-large-below {
  @media (max-width: #{$phone-large-width - 1px}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin tablet-below {
  @media (max-width: #{$tablet-width}) {
    @content;
  }
}

@mixin tablet-large-below {
  @media (max-width: #{$tablet-large-width}) {
    @content;
  }
}


@mixin tablet-small-below {
  @media (max-width: #{$tablet-small-width}) {
    @content;
  }
}

@mixin tablet-above {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-medium-width - 1px}) {
    @content;
  }
}


@mixin desktop-below {
  @media (max-width: #{$desktop-width}) {
    @content;
  }
}

@mixin desktop-above {
  @media (min-width: #{$desktop-width}){
    @content;
  }
}



@mixin desktop-small-above {
  @media (min-width: #{$desktop-small-width}){
    @content;
  }
}

@mixin desktop-small {
  @media (min-width: #{$desktopwidth}) and (max-width: #{$desktop-small-width - 1px}) {
    @content;
  }
}


@mixin desktop-small-below {
  @media (max-width: #{$desktop-small-width}) {
    @content;
  }
}


@mixin desktop-medium {
  @media (min-width: #{$desktop-width}) and (max-width: #{$desktop-medium-width - 1px}) {
    @content;
  }
}

@mixin desktop-medium-below {
  @media (max-width: #{$desktop-medium-width - 1px}) {
    @content;
  }
}

@mixin desktop-medium-above {
  @media (min-width: #{$desktop-medium-width}) {
    @content;
  }
}


@mixin desktop-large {
  @media (min-width: #{$desktop-medium-width}) and (max-width: #{$desktop-large-width - 1px}) {
    @content;
  }
}


@mixin desktop-large-below {
  @media (max-width: #{$desktop-large-width - 1px}) {
    @content;
  }
}


@mixin desktop-xlarge {
  @media (min-width: #{$desktop-large-width}) and (max-width: #{$desktop-xlarge-width - 1px}) {
    @content;
  }
}

@mixin desktop-xlarge-below {
  @media (max-width: #{$desktop-xlarge-width - 1px}) {
    @content;
  }
}


@mixin height-large-above {
  @media (min-height: 1000px) {
    @content;
  }
}


@mixin height-large {
  @media (max-height: 1000px) {
    @content;
  }
}

@mixin height-medium {
  @media (max-height: 800px) {
    @content;
  }
}


@mixin height-small {
  @media (max-height: 650px) {
    @content;
  }
}



@mixin height-xsmall {
  @media (max-height: 450px) {
    @content;
  }
}


